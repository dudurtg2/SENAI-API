package com.exemplo.meuapp.infrastructure.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configura√ß√£o avan√ßada do OpenAPI/Swagger para documenta√ß√£o da API SENAI
 * 
 * Esta configura√ß√£o fornece uma documenta√ß√£o completa da API com:
 * - Metadados da aplica√ß√£o
 * - Esquemas de seguran√ßa (JWT)
 * - Informa√ß√µes de contato e licen√ßa
 * - Configura√ß√£o de servidores
 * 
 * @author Time SENAI
 * @version 2.0
 */
@Configuration
public class SwaggerConfig {
    
    /**
     * Configura√ß√£o principal do OpenAPI com metadados completos
     */
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(apiInfo())
                .servers(apiServers())
                .addSecurityItem(securityRequirement())
                .components(apiComponents());
    }
    
    /**
     * Informa√ß√µes detalhadas da API
     */
    private Info apiInfo() {
        return new Info()
                .title("üéì SENAI API - Sistema de Gest√£o Acad√™mica")
                .description("""
                        **API REST para Sistema de Gest√£o Acad√™mica do SENAI**
                        
                        Esta API oferece funcionalidades completas para gerenciamento de:
                        - üë• **Usu√°rios**: Alunos, Professores e Administradores
                        - üìö **Projetos**: Cria√ß√£o e acompanhamento de projetos acad√™micos
                        - üè¢ **Unidades Curriculares**: Gest√£o de disciplinas e conte√∫dos
                        - üìç **Endere√ßos**: Localiza√ß√£o de estudantes e unidades
                        - üìã **Etapas de Projeto**: Controle de progresso e entregas
                        - üìé **Anexos**: Upload e gest√£o de documentos
                        
                        ### üîó Frontend
                        Interface web dispon√≠vel em: [@dudurtg2/SENAI-SITE](https://github.com/dudurtg2/SENAI-SITE)
                        
                        ### üèóÔ∏è Arquitetura
                        Desenvolvida seguindo **Clean Architecture (Hexagonal Architecture)** com:
                        - **Domain Layer**: Entidades e regras de neg√≥cio
                        - **Application Layer**: Casos de uso e portas
                        - **Infrastructure Layer**: Adaptadores externos (BD, APIs)
                        - **Presentation Layer**: Controllers REST
                        
                        ### üîê Autentica√ß√£o
                        API protegida com **JWT tokens**. Use o endpoint de login para obter o token.
                        
                        ### üíæ Banco de Dados
                        - **Desenvolvimento**: H2 Database (em mem√≥ria)  
                        - **Produ√ß√£o**: PostgreSQL
                        - Console H2: [http://localhost:8080/h2-console](http://localhost:8080/h2-console)
                        """)
                .version("v1.0.0")
                .contact(apiContact())
                .license(apiLicense());
    }
    
    /**
     * Informa√ß√µes de contato do time de desenvolvimento
     */
    private Contact apiContact() {
        return new Contact()
                .name("Time SENAI - Desenvolvimento")
                .email("dev@senai.br")
                .url("https://github.com/dudurtg2/SENAI-API");
    }
    
    /**
     * Informa√ß√µes de licen√ßa
     */
    private License apiLicense() {
        return new License()
                .name("MIT License")
                .url("https://opensource.org/licenses/MIT");
    }
    
    /**
     * Configura√ß√£o dos servidores dispon√≠veis
     */
    private List<Server> apiServers() {
        return List.of(
                new Server()
                        .url("http://localhost:8080")
                        .description("üõ†Ô∏è Servidor de Desenvolvimento"),
                new Server()
                        .url("https://api.senai.edu.br")
                        .description("üöÄ Servidor de Produ√ß√£o")
        );
    }
    
    /**
     * Requisito de seguran√ßa padr√£o para todos os endpoints
     */
    private SecurityRequirement securityRequirement() {
        return new SecurityRequirement().addList("Bearer Authentication");
    }
    
    /**
     * Componentes de seguran√ßa e esquemas reutiliz√°veis
     */
    private Components apiComponents() {
        return new Components()
                .addSecuritySchemes("Bearer Authentication", securityScheme());
    }
    
    /**
     * Esquema de autentica√ß√£o JWT
     */
    private SecurityScheme securityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT")
                .description("""
                        **Autentica√ß√£o via JWT Token**
                        
                        Para usar endpoints protegidos:
                        1. Fa√ßa login no endpoint `/api/v1/auth/login`
                        2. Copie o token retornado
                        3. Clique em "üîí Authorize" e cole o token
                        4. O token ser√° inclu√≠do automaticamente nos headers das requisi√ß√µes
                        
                        **Formato**: `Bearer <seu-jwt-token>`
                        """);
    }
}
